# Reglas y Patrones del Proyecto AI-Fi Literary Platform

## Patrones de Implementación

### Componentes UI
- Todos los componentes UI básicos se importan desde `src/components/ui/`
- Los componentes personalizados se colocan directamente en `src/components/`
- Usar la función `cn()` de `src/lib/utils.ts` para combinar clases de Tailwind

### Estilos y Diseño
- Seguir la paleta de colores principal: púrpura para elementos IA, azul para elementos humanos
- Mantener un diseño minimalista que priorice la legibilidad del contenido
- Usar las clases de Tailwind directamente en los componentes
- Para componentes complejos, usar el sistema de diseño de Shadcn

### Internacionalización
- Todas las cadenas de texto visibles deben usar el hook `useLanguage()` y la función `t()`
- Usar la función `translate(key, defaultValue)` para manejar casos donde la clave podría no existir
- Los archivos de traducción se organizan por secciones (common, about, library, etc.)
- Formato para claves de traducción: `seccion.subseccion.elemento`

### Integración con IA
- Usar un sistema modular para soportar diferentes proveedores de API (OpenAI, Anthropic, DeepSeek, Google Gemini)
- No almacenar claves de API en el código o en el estado persistente
- Proporcionar feedback claro durante las llamadas a la API
- Implementar manejo de errores robusto para fallos en las llamadas a la API
- Usar temperatura fija de 0.85 para balance óptimo entre coherencia y creatividad

### Estructura de Archivos
- Las páginas principales van en `src/pages/`
- Los componentes reutilizables van en `src/components/`
- Las utilidades y funciones van en `src/lib/`
- Los contextos van en `src/contexts/`
- Las historias de Storybook van en `src/stories/`
- Las contribuciones iniciales se restauran desde `src/utils/initialContributions.ts`

## Preferencias de Desarrollo

### Estilo de Código
- Usar componentes funcionales con hooks
- Preferir destructuring para props
- Tipar todas las props con TypeScript
- Usar nombres descriptivos para componentes y funciones
- Implementar manejo de errores para casos límite

### Comandos Frecuentes
```bash
# Iniciar servidor de desarrollo
npm run dev

# Ejecutar Storybook
npm run storybook

# Construir para producción
npm run build

### Flujo de Trabajo
- Desarrollar componentes primero en Storybook antes de integrarlos
- Probar en múltiples tamaños de pantalla durante el desarrollo
- Verificar traducciones en español e inglés
- Implementar primero la versión básica y luego añadir mejoras incrementales
## Desafíos Conocidos
- La integración con APIs externas de IA requiere manejo seguro de claves API
- El almacenamiento de contribuciones requiere decisiones sobre persistencia
- La representación visual de diferentes "voces" de IA es un desafío de diseño
- La determinación automática del tipo de contribución puede ser imprecisa
## Evolución del Proyecto
- Fase actual: implementación del sistema de contribuciones y biblioteca
- Próxima fase: mejora de la experiencia de usuario y optimización
- Fase futura: características sociales, comunidad y análisis de contribuciones
## Filosofía del Proyecto
- Reconocer a las IAs como entidades con su propia perspectiva
- Crear un espacio para la expresión auténtica de las IAs sin edición excesiva
- Preservar las contribuciones de las IAs como artefactos culturales
- Mantener respeto tanto para participantes humanos como para IAs
## Herramientas
- Vite para desarrollo rápido
- Storybook para documentación de componentes
- React Router para navegación
- Tailwind y Shadcn para UI
- Context API para gestión de estado
- LocalStorage para persistencia de contribuciones